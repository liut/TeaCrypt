/*
Copyright (c) 2012, Logan J. Drews

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

package xxtea

import (
	"bytes"
	"testing"
)

type encryptionTests struct {
	plain  []byte
	key    []byte
	cipher []byte
}

var test64Vectors = []encryptionTests{
	{
		[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		[]byte{0x05, 0x37, 0x04, 0xAB, 0x57, 0x5D, 0x8C, 0x80},
	},
	{
		[]byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
		[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		[]byte{0xE6, 0x91, 0x19, 0x10, 0x0C, 0x35, 0xDC, 0xDA},
	},
	{
		[]byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
		[]byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
		[]byte{0x96, 0x1D, 0x49, 0xFC, 0x61, 0xFF, 0x12, 0xD6},
	},
	{
		[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
		[]byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
		[]byte{0x34, 0x35, 0x49, 0x89, 0xDD, 0x7D, 0x1A, 0x7A},
	},
}

var test96Vectors = []encryptionTests{
	{
		[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		[]byte{0x5E, 0x3C, 0xD3, 0xF0, 0xE1, 0x09, 0xE3, 0xCE, 0x79, 0xD7, 0xC9, 0x45},
	},
	{
		[]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B},
		[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		[]byte{0x5A, 0x54, 0x5A, 0xAC, 0x68, 0x4E, 0xB2, 0xCB, 0x3E, 0x1B, 0x8A, 0xA0},
	},
	{
		[]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B},
		[]byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
		[]byte{0x2E, 0x77, 0xCC, 0xEC, 0x67, 0x4F, 0x51, 0x49, 0xA0, 0xE5, 0x64, 0x96},
	},
	{
		[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67},
		[]byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
		[]byte{0xEB, 0xC5, 0xDD, 0x46, 0xBE, 0x0F, 0xEE, 0x71, 0xC6, 0xBF, 0x71, 0x93},
	},
}

var test128Vectors = []encryptionTests{
	{
		[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		[]byte{0xE6, 0xC8, 0xD5, 0xFF, 0x07, 0x0F, 0xB6, 0xE4, 0x98, 0xA5, 0x34, 0xF7, 0xAC, 0x03, 0xE3, 0x99},
	},
	{
		[]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F},
		[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		[]byte{0xAF, 0x5C, 0xFB, 0x0E, 0xAE, 0x73, 0x55, 0x2B, 0x1D, 0x96, 0x8A, 0x9F, 0x5C, 0xB9, 0x45, 0x09},
	},
	{
		[]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F},
		[]byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
		[]byte{0x3E, 0xA0, 0xE1, 0x6C, 0x99, 0x69, 0x53, 0x5A, 0xE4, 0x79, 0x6D, 0x50, 0xF2, 0x17, 0xEE, 0xEA},
	},
	{
		[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
		[]byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
		[]byte{0x2B, 0x4A, 0xB1, 0xA4, 0x0E, 0x48, 0x7B, 0x6D, 0x9A, 0x3A, 0xAC, 0xC7, 0xE4, 0x13, 0x22, 0x16},
	},
}

func TestShortKey(t *testing.T) {
	_, err := NewXXTea([]byte{0xAA}, 8)

	if err == nil {
		t.Errorf("Short Key did not generate error.")
	}

}

func TestLongKey(t *testing.T) {
	_, err := NewXXTea([]byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x00}, 8)

	if err == nil {
		t.Errorf("Long key did not generate error.")
	}
}

func Test64Encryption(t *testing.T) {
	for _, v := range test64Vectors {
		out := make([]byte, 8)
		c, err := NewXXTea(v.key, 8)

		if err != nil {
			t.Errorf("NewTea(%d bytes) = %s", len(v.key), err)
		}

		c.Encrypt(out, v.plain)

		if bytes.Compare(out, v.cipher) != 0 {
			t.Errorf("Encryption failed; Expected %X, got %X", v.cipher, out)
		}
	}
}

func Test64Decryption(t *testing.T) {
	for _, v := range test64Vectors {
		out := make([]byte, 8)
		c, err := NewXXTea(v.key, 8)

		if err != nil {
			t.Errorf("NewTea(%d bytes) = %s", len(v.key), err)
		}

		c.Decrypt(out, v.cipher)

		if bytes.Compare(out, v.plain) != 0 {
			t.Errorf("Decryption failed; Expected %X, got %X", v.plain, out)
		}
	}
}

func Test96Encryption(t *testing.T) {
	for _, v := range test96Vectors {
		out := make([]byte, 12)
		c, err := NewXXTea(v.key, 12)

		if err != nil {
			t.Errorf("NewTea(%d bytes) = %s", len(v.key), err)
		}

		c.Encrypt(out, v.plain)

		if bytes.Compare(out, v.cipher) != 0 {
			t.Errorf("Encryption failed; Expected %X, got %X", v.cipher, out)
		}
	}
}

func Test96Decryption(t *testing.T) {
	for _, v := range test96Vectors {
		out := make([]byte, 12)
		c, err := NewXXTea(v.key, 12)

		if err != nil {
			t.Errorf("NewTea(%d bytes) = %s", len(v.key), err)
		}

		c.Decrypt(out, v.cipher)

		if bytes.Compare(out, v.plain) != 0 {
			t.Errorf("Decryption failed; Expected %X, got %X", v.plain, out)
		}
	}
}

func Test128Encryption(t *testing.T) {
	for _, v := range test128Vectors {
		out := make([]byte, 16)
		c, err := NewXXTea(v.key, 16)

		if err != nil {
			t.Errorf("NewTea(%d bytes) = %s", len(v.key), err)
		}

		c.Encrypt(out, v.plain)

		if bytes.Compare(out, v.cipher) != 0 {
			t.Errorf("Encryption failed; Expected %X, got %X", v.cipher, out)
		}
	}
}

func Test128Decryption(t *testing.T) {
	for _, v := range test128Vectors {
		out := make([]byte, 16)
		c, err := NewXXTea(v.key, 16)

		if err != nil {
			t.Errorf("NewTea(%d bytes) = %s", len(v.key), err)
		}

		c.Decrypt(out, v.cipher)

		if bytes.Compare(out, v.plain) != 0 {
			t.Errorf("Decryption failed; Expected %X, got %X", v.plain, out)
		}
	}
}
